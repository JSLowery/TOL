<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, June 26, 2016, 3:38 PM -->
<!-- MuClient version 4.98 -->

<!-- Plugin "cp_mobTableFiller" generated by Plugin Wizard -->

<muclient>
<plugin
   name="cp_mobTableFiller"
   author="Sonet"
   id="0961770926b613688a1c5458"
   language="Lua"
   purpose="Fills the killtable.db with cp_mobs"
   save_state="y"
   date_written="2016-06-26 15:36:37"
   requires="4.77"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   match="^Congratulations, that was one of your|the (CAMPAIGN|GLOBAL QUEST) mobs!$"
   name="cp_trigger"
   regexp="y"
   send_to="12"
   script="last_kill"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^QUEST: You have almost completed your QUEST!$"
   name="cp_trigger1"
   regexp="y"
   send_to="12"
   script="last_kill"
   sequence="100"
  >
  </trigger>

<trigger
   omit_from_output="y"
   match="^Kill history for (.*):$"
   name="cp_gag"
   group="gag_lastkill"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  </trigger>

  <trigger
   omit_from_output="y"
   match="^Name                            Level  Exp  From$"
   name="cp_gag1"
   enabled="n"
   group="gag_lastkill"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  </trigger>

  <trigger
   omit_from_output="y"
   enabled="n"
   match="^------------------------------  -----  ---  -------------------------$"
   name="cp_gag2"
   regexp="y"
   group="gag_lastkill"
   send_to="12"
   sequence="100"
  >
  </trigger>

  <trigger
   omit_from_output="y"
   enabled="n"
   match="^(.+)(\s+)([0-9]+)(\s+)([0-9]+)(\s+)(.+)$"
   name="cp_gag3"
   regexp="y"
   group="gag_lastkill"
   send_to="12"
   script="Add_To_Table"
   sequence="100"
  >
  
  </trigger>

</triggers>

<!--  Aliases  -->



<!--  Variables  -->

<variables>
  <variable name="QArea1">The Realm of the Hawklords</variable>
</variables>

<!--  Script  -->


<script>
<![CDATA[
require "tprint"
require "gmcphelper"
require "wait"
local areaid
local roomid
local roomname
local cpmobs
local added_check = true
-- print("test")
-- print(GetPluginInfo (GetPluginID (), 20))
function last_kill()
  do_Execute_no_echo("lastkill 1")
  EnableTriggerGroup("gag_lastkill",true)
end

function do_Execute_no_echo(command)
  local original_echo_setting = GetOption("display_my_input")
  SetOption("display_my_input", 0)
  Execute(command)
  SetOption("display_my_input", original_echo_setting)
end
function myHandler(udata, retries)
   DebugNote("BUSY!")
   return true
end
function Add_To_Table(name, line, wildcards)
  local name = wildcards[1]
 -- print (name)
  local Level
  local area
  local roomid
  local roomName
  local key = "%s%s+"
 -- tprint (currentRoom)
dbA=sqlite3.open(GetInfo (66) ..'Aardwolf.db')
dbkt=sqlite3.open(GetPluginInfo (GetPluginID (), 20) .. 'KillTable.db')
dbkt:busy_handler(myHandler)
  EnableTriggerGroup("gag_lastkill",false)
  i, p =string.find(name, key)
  if char_status == nil or added_check == true then
    name = string.sub(name, 1, i-1) 
  else
  --  print (char_status  == nil)
    name =char_status.enemy
    added_check = false
  end--if
 -- print (name.. " after if block selecting name")
  area = gmcpval("zone")
  query = string.format("SELECT name from areas where uid = %s", fixsql(area))
  for rows in dbA:nrows(query) do
      -- print (rows.name)
      area= rows.name
  end --for
  if rc ~= 0 then
  Note ( DatabaseError('dbA'))
    print (query)
    print (stmt)
    print (name)
    print (area)
    print (level)
    print (roomName)
    print (dbA:errcode())
  end--if
  level = wildcards[3]
  if currentRoom == nil then
    res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","room.info")

        luastmt = "gmcpdata = " .. gmcparg
        assert (loadstring (luastmt or "")) ()
        --tprint (gmcpdata)
        currentRoom = {
          roomname = gmcpdata.name,
          roomid = gmcpdata.num,
          areaid = gmcpdata.zone
        }
  end
  -- print (string.gsub(currentRoom.roomname, "%@([a-z])", ""))
  -- print(string.gsub(currentRoom.roomname,"@([a-zA-Z])",""))
  roomName= string.gsub(currentRoom.roomname, "%@([a-zA-Z])", "")
    -- print (roomName)
  -- roomName= string.gsub(currentRoom.roomname, "%@([A-Z])", "")
  --   print (string.gsub(currentRoom.roomname, "%@([A-Z])", ""))
  -- print (roomName)
  roomid = currentRoom.roomid
  stmt="INSERT INTO CPMobs(name, room_id, room_name, area_name, level) VALUES(%s,%s,%s,%s,%s);"
  stmt = string.format(stmt, fixsql(name), tonumber(roomid), fixsql(roomName), fixsql(area), tonumber(level))
  -- rc= dbkt:exec(stmt)
  tblCount = string.format("select room_id, area_name, name, COUNT(*) as timeskilled "..
        "from CPMobs "..
        "where name like %s and  "..
        "area_name = %s and "..
        "room_id = %s "..
        "group by  name "..
        "ORDER by timeskilled desc", fixsql(name), fixsql(area), tonumber(roomid))
  --print (rc)
  local tblCountC
  for i in dbkt:nrows(tblCount) do
    tblCountC = i.timeskilled
  end
  if tblCountC == nil or tblCountC < 25 then
    --print ("adding mob")
    -- dbExecute(stmt) -- testing - Kobus
		rc = dbkt:exec(stmt) -- testing - Kobus
  else
    print ("You have the limit of that type of creature for this room. Tell Tol about this message")
  end
  if rc ~= 0 then
  Note ( DatabaseError('dbkt'))
    print (query)
    print (stmt)
    print (name)
    print (roomid)
    print (roomName)
    print (area)
    print (level)
    print (dbkt:errcode())

  end--if
  name = nil
  roomid = nil
  roomName = nil
  area = nil
  level = nil
  dbA:close()
  dbkt:close()
end



function dbExecute(query)
  local llthreads = require"llthreads"
  --print (package.cpath)

	Note("dbexecute: " .. query)
  local thread_code = [[
  local db = pcall(require,"lsqlite3")
  temp= ''
  local function dbcheck (code, dbkt)
    if code ~= sqlite3.OK and    -- no error
    code ~= sqlite3.ROW and   -- completed OK with another row of data
    code ~= sqlite3.DONE then -- completed OK, no more rows
    -- print ("cp mob table filler ".. code)
    local err = dbkt:errmsg ()  -- the rollback will change the error message
    dbkt:exec ("ROLLBACK")      -- rollback any transaction to unlock the database
    error (err, 2)            -- show error in caller's context
    end -- if
    if code == sqlite3.OK then print ("added")  return true end
    return false
  end -- dbcheck 
  local tst=sqlite3.open(']]..prepairPath(GetPluginInfo (GetPluginID (), 20) ).. [[KillTable.db')
  local code = tst:exec(...)
  added_check= dbcheck(code, tst)
  
  -- querycheck = "Select count(name) as count from CPMobs "
  -- for a in tst:nrows(querycheck) do 
  --   temp =a.count 
  -- end
  tst:close()
  --   --   -- return all thread's parameters back to the parent thread.
      return added_check
  ]]
  -- create child thread.
  -- print (query)
  local thread = llthreads.new(thread_code, query)
  -- start joinable child thread.
  assert(thread:start(true))
  --assert(thread:start())
  --added_check= (thread:join())
added_check = true
end

function prepairPath(s)
  return string.gsub(s, "\\", "\\\\")
end

function fixsql (s)
   if s then
      return "'" .. (string.gsub (s, "'", "''")) .. "'" -- replace single quotes with two lots of single quotes
   else
      return "NULL"
   end -- if
end -- fixsql

function init()
  dbkt=sqlite3.open(GetPluginInfo (GetPluginID (), 20) .. 'KillTable.db')
  rc= dbkt:exec([[
        drop table if exists
        CREATE TABLE CPMobs(
          mk_id INTEGER NOT NULL PRIMARY KEY autoincrement,
          name TEXT default "Unknown",
          room_id INTEGER default 0, 
          room_name TEXT default "Unknown",
          area_name TEXT default "Unknown",
          level INTEGER default 0);"
      ]])
  if rc ~= 0 then
    Note (DatabaseError('dbkt'))
  end--if
  dbkt:close()
end
function OnPluginBroadcast(msg,id,name,text)
  
  if (id == '3e7dedbe37e44942dd46d264') then
      if (text == "room.info") then
        res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","room.info")

        luastmt = "gmcpdata = " .. gmcparg
        assert (loadstring (luastmt or "")) ()
        --tprint (gmcpdata)
        currentRoom = {
          roomname = gmcpdata.name,
          roomid = gmcpdata.num,
          areaid = gmcpdata.zone
        }
        --tprint (currentRoom)
      end
      if (text == "char.status") and cpmobs ~= nil  then
        res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char.status")
        luastmt = "gmcpdatacharstatus = " .. gmcparg
        assert (loadstring (luastmt or "")) ()
        --print (gmcpdatacharstatus.enemy)
        if gmcpdatacharstatus.enemy ~= '' and added_check == true then
          for i = 1, #cpmobs do
            if gmcpdatacharstatus.enemy == cpmobs[i].name then
              char_status = gmcpdatacharstatus
              --Note ("changed mob to ".. char_status.enemy)
              added_check = false
              break
            end--if
            added_check = true
          end
        end--if
        --tprint(char_status)

        --currentState = tonumber(gmcpval("status.state"))
      end
    end
     if id == "8065ca1ba19b529aee53ee44" then
      if msg == 1 then
        local pvar = GetPluginVariable(  "8065ca1ba19b529aee53ee44", "cp_mobs" )

      -- get the mobs
        loadstring( pvar )()
        cpmobs = cp_mobs
      end--if
    end
end
function OnPluginInstall()
  dbkt=sqlite3.open(GetPluginInfo (GetPluginID (), 20) .. 'KillTable.db')
  rc =dbkt:exec([[SELECT name FROM CPMobs ]])
  if rc~= 0 then
    print ('making table')
    init()
  end--if
  --dbA=sqlite3.open(GetInfo (66) ..'Aardwolf.db')
  dbkt:close()
end

function OnPluginClose ()
  if dbkt:isopen() then
    dbkt:close()
  end
  if dbA:isopen() then
    dbA:close()
  end
end
]]>
</script>


</muclient>
